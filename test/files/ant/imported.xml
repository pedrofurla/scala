<?xml version="1.0" encoding="UTF-8"?>

<<<<<<< HEAD
<project name="imported" default="run" basedir=".">
=======
<project name="imported">

  <!-- This file is imported by the main Ant script. -->
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0

  <!-- Prevents system classpath from being used -->
  <property name="build.sysclasspath" value="ignore"/>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property name="source.dir" value="${basedir}"/>

<<<<<<< HEAD
  <property file="./build.properties"/>
=======
  <property file="${basedir}/build.properties"/>

  <property name="build.dir" location="${source.dir}/${ant.project.name}-ant.obj"/>
  <property name="log.dir" location="${source.dir}"/>
  <property name="log.file" value="${log.dir}/${ant.project.name}-build-ant.log"/>
  <property name="project.dir" value="../../.."/>
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0

  <condition property="quick.binary">
    <equals arg1="${binary}" arg2="quick"/>
  </condition>
<<<<<<< HEAD
=======
  <condition property="pack.binary">
    <equals arg1="${binary}" arg2="pack"/>
  </condition>
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
  <condition property="latest.binary">
    <equals arg1="${binary}" arg2="latest"/>
  </condition>
  <condition property="installed.binary">
    <equals arg1="${binary}" arg2="installed"/>
  </condition>

<<<<<<< HEAD
  <fail message="Property 'binary' must be set to either 'quick', 'lastest' or 'installed'.">
    <condition><not><or>
      <isset property="quick.binary"/>
=======
  <fail message="Property 'binary' must be set to either 'quick', 'pack', 'latest' or 'installed'.">
    <condition><not><or>
      <isset property="quick.binary"/>
      <isset property="pack.binary"/>
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
      <isset property="latest.binary"/>
      <isset property="installed.binary"/>
    </or></not></condition>
  </fail>
  <echo level="verbose" message="binary=${binary}"/>
<<<<<<< HEAD

  <property name="build.dir" value="${java.io.tmpdir}/classes-${user.name}"/>
=======
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
  <echo level="verbose" message="build.dir=${build.dir}"/>

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="quick.init" if="quick.binary">
<<<<<<< HEAD
    <property name="quick.dir" value="../../../build/quick"/>
    <available file="${quick.dir}" property="quick.present"/>
    <fail
       message="Quick build could not be found."
       unless="quick.present"
    />
    <property name="scala.dir" value="${quick.dir}"/>
    <property name="scala-library.lib" value="${scala.dir}/lib/library/"/>
    <property name="scala-compiler.lib" value="${scala.dir}/lib/compiler/"/>
    <property name="fjbg.lib" value="${scala.dir}/lib/fjbg.jar"/>
  </target>

  <target name="latest.init" if="latest.binary">
    <property name="latest.dir" value="../../../dists/latest"/>
    <available file="${latest.dir}" property="latest.present"/>
    <fail
      message="Latest build could not be found."
      unless="latest.present"
    />
=======
    <property name="quick.dir" value="${project.dir}/build/quick"/>
    <fail message="Quick build could not be found.">
      <condition><not><available file="${quick.dir}"/></not></condition>
    </fail>
    <property name="scala.dir" value="${quick.dir}"/>
    <property name="scala-library.lib" value="${scala.dir}/classes/library/"/>
    <property name="scala-compiler.lib" value="${scala.dir}/classes/compiler/"/>
    <property name="fjbg.lib" value="${project.dir}/lib/fjbg.jar"/>
  </target>

  <target name="pack.init" if="pack.binary">
    <property name="pack.dir" value="${project.dir}/build/pack"/>
    <fail message="Pack build could not be found.">
      <condition><not><available file="${pack.dir}"/></not></condition>
    </fail>
    <property name="scala.dir" value="${pack.dir}"/>
    <property name="scala-library.lib" value="${scala.dir}/lib/scala-library.jar"/>
    <property name="scala-compiler.lib" value="${scala.dir}/lib/scala-compiler.jar"/>
    <property name="fjbg.lib" value=""/>
  </target>

  <target name="latest.init" if="latest.binary">
    <property name="latest.dir" value="${project.dir}/dists/latest"/>
    <fail message="Latest build could not be found.">
      <condition><not><available file="${latest.dir}"/></not></condition>
    </fail>
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
    <property name="scala.dir" value="${latest.dir}"/>
    <property name="scala-library.lib" value="${scala.dir}/lib/scala-library.jar"/>
    <property name="scala-compiler.lib" value="${scala.dir}/lib/scala-compiler.jar"/>
    <property name="fjbg.lib" value=""/>
  </target>

  <target name="installed.init" if="installed.binary">
<<<<<<< HEAD
    <property name="installed.dir" value="/home/linuxsoft/apps/scala/share/scala"/>
    <available file="${installed.dir}" property="installed.present"/>
    <fail
      message="Installed distribution could not be found."
      unless="installed.present"
    />
=======
    <property name="installed.dir" value="/opt/scala"/>
    <fail message="Installed distribution could not be found.">
      <condition><not><available file="${installed.dir}"/></not></condition>
    </fail>
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
    <property name="scala.dir" value="${installed.dir}"/>
    <property name="scala-library.lib" value="${scala.dir}/lib/scala-library.jar"/>
    <property name="scala-compiler.lib" value="${scala.dir}/lib/scala-compiler.jar"/>
    <property name="fjbg.lib" value=""/>
  </target>

<<<<<<< HEAD
  <target name="init" depends="quick.init, latest.init, installed.init">
    <echo level="verbose" message="scala.dir=${scala.dir}"/>
    <fail message="Scala library '${scala-library.lib}' is not available">
      <condition><not><and>
        <available classname="scala.Predef"
                   classpath="${scala-library.lib}"/>
        <available classname="scala.List"
                   classpath="${scala-library.lib}"/>
        <available classname="scala.runtime.ObjectRef"
                   classpath="${scala-library.lib}"/>
      </and></not></condition>
    </fail>
    <fail message="Scala library '${scala-compiler.lib}' is not available">
      <condition><not><and>
        <available classname="scala.tools.ant.Scalac"
                   classpath="${scala-compiler.lib}"/>
        <available classname="scala.tools.nsc.Main"
                   classpath="${scala-compiler.lib}"/>
        <available classname="scala.tools.util.StringOps"
                   classpath="${scala-compiler.lib}"/>
      </and></not></condition>
    </fail>
    <path id="scala.classpath">
      <pathelement location="${scala-library.lib}"/>
      <pathelement location="${scala-compiler.lib}"/>
      <pathelement location="${fjbg.lib}"/> <!-- only present for 'quick' -->
    </path>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <path refid="scala.classpath"/>
      </classpath>
    </taskdef>
=======
  <target name="init" depends="quick.init, pack.init, latest.init, installed.init">
    <echo level="verbose" message="scala.dir=${scala.dir}"/>

    <path id="scala.classpath">
      <pathelement location="${scala-library.lib}"/>
      <pathelement location="${scala-compiler.lib}"/>
      <pathelement location="${fjbg.lib}"/> <!-- only present for 'quick' -->
    </path>

    <fail message="Scala library '${scala-library.lib}' or '${scala-compiler.lib}' is missing/broken">
      <condition><not><and>
        <available classname="scala.Predef"
                   classpathref="scala.classpath"/>
        <available classname="scala.Option"
                   classpathref="scala.classpath"/>
        <available classname="scala.runtime.ObjectRef"
                   classpathref="scala.classpath"/>
        <available classname="scala.tools.ant.Scalac"
                   classpathref="scala.classpath"/>
        <available classname="scala.tools.nsc.Main"
                   classpathref="scala.classpath"/>
        <available classname="scala.tools.util.StringOps"
                   classpathref="scala.classpath"/>
      </and></not></condition>
    </fail>
    <taskdef resource="scala/tools/ant/antlib.xml" classpathref="scala.classpath"/>

>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
    <path id="build.classpath">
      <!--<pathelement location="${scala-actors.lib}"/>-->
      <pathelement location="${scala-library.lib}"/>
      <pathelement location="${build.dir}"/>
    </path>
<<<<<<< HEAD
=======

    <!-- make sure the log file exists when the Ant build scripts -->
    <!-- are run manually from the command prompt -->
    <touch file="${log.file}"/>
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
  </target>

<!-- ===========================================================================
RUN
============================================================================ -->

  <target name="run" depends="build, clean"/>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}" includeemptydirs="yes" quiet="yes" failonerror="no"/>
    </sequential>
  </macrodef>

  <target name="clean">
    <remove dir="${build.dir}"/>
  </target>

</project>

