builder > A.scala B.scala
compiling Set(A.scala, B.scala)
Changes: Map()
builder > A.scala
compiling Set(A.scala)
<<<<<<< HEAD
Changes: Map(class A -> List(Changed(Definition(A.x))[method x changed from (i: Int)java.lang.String to (i: java.lang.String)java.lang.String flags: <method>]))
invalidate B.scala because inherited method changed [Changed(Definition(A.x))[method x changed from (i: Int)java.lang.String to (i: java.lang.String)java.lang.String flags: <method>]]
compiling Set(B.scala)
B.scala:2: error: overriding method x in class A of type (i: String)java.lang.String;
=======
Changes: Map(class A -> List(Changed(Definition(A.x))[method x changed from (i: Int)String to (i: String)String flags: <method>]))
invalidate B.scala because inherited method changed [Changed(Definition(A.x))[method x changed from (i: Int)String to (i: String)String flags: <method>]]
compiling Set(B.scala)
B.scala:2: error: overriding method x in class A of type (i: String)String;
>>>>>>> 426c65030df3df0c3e038931b64199fc4e83c1a0
 method x needs `override' modifier
  def x(s: String) = s+"5"
      ^
